# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

AWSTemplateFormatVersion: 2010-09-09
Description: >-
  batch-protein-folding-cfn-container.yaml: Creates container building and hosting resources.
Parameters:
  ApplicationName:
    Description: Name of the application, if applicable
    Type: String
    Default: "Unknown"
  Environment:
    Description: Leave this as "main" unless you are testing a pre-release versions of this architecture.
    Type: String
    Default: main
    AllowedValues:
      - main
      - dev     
  DownloadFsxData:
    Description: Automatically populate FSx for Lustre file system with model parameters and sequence databases?
    Type: String
    Default: "N"
    AllowedValues: [Y, N]
  CodeRepoS3BucketName:
    Description: S3 Bucket Name to retrieve code zip
    Type: String    
    Default: "archon-iac"
  S3BucketARN:
    Description: S3 Bucket ARN
    Type: String
  Timestamp:
    Description: Timestamp for the cfn deployment
    Type: Number
    Default: 9999999999

Conditions:
  DownloadFsxDataCondition:
    "Fn::Equals": [Ref: "DownloadFsxData", "Y"] 

Resources:

  ##################################################
  # Container Services
  ##################################################
  CodeRepository:
    Type: AWS::CodeCommit::Repository
    Properties:
      Code:
        BranchName: "main"
        S3:
          Bucket: !Ref CodeRepoS3BucketName
          Key: !Sub "${Environment}/batch-protein-folding.zip"
      RepositoryDescription: Code for running batch protein folding on AWS
      RepositoryName:
        !Join [
          "-",
          [
            "batch-protein-folding",
            "code-repo",
            !Select [
              4,
              !Split ["-", !Select [2, !Split ["/", !Ref "AWS::StackId"]]],
            ],
          ],
        ]
      Tags:
        - Key: Application
          Value: !Ref ApplicationName
        - Key: StackId
          Value: !Ref AWS::StackId

  DownloadContainerRegistry:
    Type: AWS::ECR::Repository
    Properties:
      EncryptionConfiguration:
        EncryptionType: AES256
      ImageScanningConfiguration:
        ScanOnPush: true
      Tags:
        - Key: Application
          Value: !Ref ApplicationName
        - Key: StackId
          Value: !Ref "AWS::StackId"    

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "Required service policies to support building containers"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - Fn::Sub: "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/CodeBuildProject*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                Resource:
                  - !Join [
                      "-",
                      ["arn:aws:s3:::codepipeline", !Ref "AWS::Region", "*"],
                    ]
                  - !Sub "${S3BucketARN}*"
                  - !Sub "arn:aws:s3:::${CodeRepoS3BucketName}/*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                Resource:
                  - !Sub "arn:aws:s3:::${CodeRepoS3BucketName}*"                  
              - Effect: Allow
                Action:
                  - codecommit:GitPull
                Resource:
                  - Fn::Join:
                      [
                        ":",
                        [
                          "arn:aws:codecommit",
                          !Ref "AWS::Region",
                          !Ref "AWS::AccountId",
                          !GetAtt CodeRepository.Name,
                        ],
                      ]
              - Effect: Allow
                Action:
                  - codebuild:CreateReportGroup
                  - codebuild:CreateReport
                  - codebuild:UpdateReport
                  - codebuild:BatchPutTestCases
                  - codebuild:BatchPutCodeCoverages
                Resource:
                  - Fn::Sub: "arn:aws:s3:::codebuild:${AWS::Region}:${AWS::AccountId}:report-group/batch-protein-folding*"
      Tags:
        - Key: Application
          Value: !Ref ApplicationName
        - Key: StackId
          Value: !Ref "AWS::StackId"

  EncryptionKey:
    Type: "AWS::KMS::Key"
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Id: batch-protein-folding-key
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS:
                Fn::Join: [":", ["arn:aws:iam:", !Ref "AWS::AccountId", "root"]]
            Action:
              [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:TagResource",
                "kms:UntagResource",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion",
              ]
            Resource: "*"
          - Sid: Enable CodeBuild Encryption
            Effect: Allow
            Principal:
              AWS: !GetAtt CodeBuildRole.Arn
            Action:
              [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:DescribeKey",
              ]
            Resource: "*"
          - Sid: Enable CloudWatch Logs Encryption
            Effect: Allow
            Principal:
              Service: "logs.amazonaws.com"
            Action:
              [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:DescribeKey",
              ]
            Resource: "*"
      Tags:
        - Key: Application
          Value: !Ref ApplicationName
        - Key: StackId
          Value: !Ref "AWS::StackId"

  CodeBuildLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: StartCodeBuildLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                Resource: "*"          
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  StartCodeBuildLambda:
    Type: AWS::Lambda::Function
    Properties:
#      ReservedConcurrentExecutions: 10
#      ReservedConcurrentExecutions: 0
      Code:
        ZipFile: |
          import logging          
          import cfnresponse
          import boto3
          LOGGER = logging.getLogger()
          LOGGER.setLevel(logging.INFO)
          def lambda_handler(event, context):
              try:
                  LOGGER.info('REQUEST RECEIVED:\n %s', event)
                  LOGGER.info('REQUEST RECEIVED:\n %s', context)
                  if event['RequestType'] == 'Create':
                      LOGGER.info('CREATE!')
                      client = boto3.client('codebuild')
                      project_name = event['ResourceProperties']['ProjectName']
                      response = client.start_build(projectName=project_name)
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {"response":"Resource creation successful!"})
                  elif event['RequestType'] == 'Update':
                      LOGGER.info('UPDATE!')
                      client = boto3.client('codebuild')
                      project_name = event['ResourceProperties']['ProjectName']
                      response = client.start_build(projectName=project_name)                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {"response":"Resource update successful!"})
                  elif event['RequestType'] == 'Delete':
                      LOGGER.info('DELETE!')
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {"response":"Resource deletion successful!"})
                  else:
                      LOGGER.info('FAILED!')
                      cfnresponse.send(event, context, cfnresponse.FAILED, {"response":"Unexpected event received from CloudFormation"})
              except: 
                  LOGGER.info('FAILED!')
                  cfnresponse.send(event, context, cfnresponse.FAILED, {"response":"Exception during processing"})
      Description: Start CodeBuildProject
      Handler: index.lambda_handler
      MemorySize: 512
      Role:
        Fn::GetAtt: CodeBuildLambdaExecutionRole.Arn
      Runtime: python3.10
      Timeout: 10
      Tags:
        - Key: Application
          Value: !Ref ApplicationName
        - Key: StackId
          Value: !Ref "AWS::StackId"  

  ##################################################
  # Delete container repo on stack deletion
  ##################################################  
  DeleteContainerRepoLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: DeleteContainerRepoLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: Allow
              Action:
                - ecr:DeleteRepository
              Resource: "*"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"

  DeleteContainerRepoLambda:
    Type: AWS::Lambda::Function
    Properties:
#      ReservedConcurrentExecutions: 10
#      ReservedConcurrentExecutions: 0
      Code:
        ZipFile: |
          import logging          
          import cfnresponse
          import boto3

          LOGGER = logging.getLogger()
          LOGGER.setLevel(logging.INFO)

          def lambda_handler(event, context):
              try:
                  LOGGER.info('REQUEST RECEIVED:\n %s', event)
                  LOGGER.info('REQUEST RECEIVED:\n %s', context)
                  if event['RequestType'] == 'Create':
                      LOGGER.info('CREATE!')
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {"response":"Resource creation successful!"})
                  elif event['RequestType'] == 'Update':
                      LOGGER.info('UPDATE!')
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {"response":"Resource update successful!"})
                  elif event['RequestType'] == 'Delete':
                      LOGGER.info('DELETE!')
                      ecr = boto3.client('ecr')
                      repo_name = event['ResourceProperties']['ContainerRepo']
                      repo_deletion_response = ecr.delete_repository(
                        repositoryName=repo_name,
                        force=True
                        )
                      LOGGER.info(f"Repo deletion response:\n{repo_deletion_response}")
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {"response":"Resource deletion successful!"})
                  else:
                      LOGGER.info('FAILED!')
                      cfnresponse.send(event, context, cfnresponse.FAILED, {"response":"Unexpected event received from CloudFormation"})
              except: 
                  LOGGER.info('FAILED!')
                  cfnresponse.send(event, context, cfnresponse.FAILED, {"response":"Exception during processing"})

      Description: Delete ECR repository
      Handler: index.lambda_handler
      MemorySize: 512
      Role:
        Fn::GetAtt: DeleteContainerRepoLambdaExecutionRole.Arn
      Runtime: python3.10
      Timeout: 10     
      Tags:
        - Key: Application
          Value: !Ref ApplicationName
        - Key: StackId
          Value: !Ref "AWS::StackId"

##################################################
# Create Download Container
##################################################  

  CodeBuildProjectDownload:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Description: Build Download Docker container
      EncryptionKey: !Ref EncryptionKey
      Environment:
        ComputeType: BUILD_GENERAL1_MEDIUM
        EnvironmentVariables:
          - Name: IMAGE_TAG
            Value: latest
          - Name: IMAGE_REPO_NAME
            Value: !Ref DownloadContainerRegistry            
          - Name: ACCOUNT_ID
            Value: !Ref "AWS::AccountId"
          - Name: BUILD_CONTEXT
            Value: infrastructure/docker/download        
          - Name: WAIT_CONDITION_HANDLE
            Value: !Ref CodeBuildWaitHandle                     
        Image: aws/codebuild/standard:6.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: true
        Type: LINUX_CONTAINER
      ResourceAccessRole: !GetAtt CodeBuildRole.Arn
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Source:
        BuildSpec: infrastructure/docker/download/buildspec_with_wait.yaml        
        GitCloneDepth: 1
        Location: !GetAtt CodeRepository.CloneUrlHttp
        Type: CODECOMMIT
      SourceVersion: refs/heads/main
      Tags:
        - Key: Application
          Value: !Ref ApplicationName
        - Key: StackId
          Value: !Ref "AWS::StackId"                     

  StartDownloadContainerBuild:
    Type: Custom::ResourceForBuildingContainer
    Properties:
      ServiceToken:
        Fn::GetAtt: StartCodeBuildLambda.Arn
      ProjectName:
        Ref: CodeBuildProjectDownload
      Timestamp:
        Ref: Timestamp

  CodeBuildWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  CodeBuildWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Condition: DownloadFsxDataCondition
    DependsOn: 
      - CodeBuildProjectDownload
    Properties:
      Handle: !Ref CodeBuildWaitHandle
      Timeout: 600
      Count: 1

  DeleteDownloadContainerRepo:
    Type: Custom::ResourceForDeletingECR
    Properties:
      ServiceToken:
        Fn::GetAtt: DeleteContainerRepoLambda.Arn
      ContainerRepo:
        Ref: DownloadContainerRegistry           

Outputs:
  CodeRepositoryURI:
    Description: Code repository URI
    Value:
      Fn::GetAtt: CodeRepository.CloneUrlHttp
  CodeBuildEncryptionKey:
    Description: Encryption key for CodeBuild jobs
    Value:
      Ref: EncryptionKey
  CodeBuildRoleArn:
    Description: IAM role for CodeBuild jobs
    Value:
      Fn::GetAtt: CodeBuildRole.Arn
  StartCodeBuildLambdaArn:
    Description: Lambda function for building container repos
    Value:
      Fn::GetAtt: StartCodeBuildLambda.Arn      
  DeleteContainerRepoLambdaArn:
    Description: Lambda function for deleting container repos
    Value:
      Fn::GetAtt: DeleteContainerRepoLambda.Arn      
  DownloadContainerRegistryURI:
    Description: URI of the download container
    Value:
      Fn::GetAtt: DownloadContainerRegistry.RepositoryUri   
  DownloadContainerRegistryName:
    Description: Name of the download container repository
    Value:
      Ref: DownloadContainerRegistry        